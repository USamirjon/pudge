import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { URL } from '../domain.ts';

function Support() {
    const [requests, setRequests] = useState([]);
    const [userNames, setUserNames] = useState({});
    const navigate = useNavigate();

    useEffect(() => {
        const fetchRequests = async () => {
            const token = localStorage.getItem('token');

            if (!token) {
                alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.');
                return;
            }

            try {
                const response = await axios.get(URL+'/api/Supports', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': '*/*'
                    }
                });

                const supports = response.data;
                setRequests(supports);

                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const userNamePromises = supports.map(async (req) => {
                    try {
                        const userResponse = await axios.get(`${URL}/api/Users/${req.userTelegramId}`, {
                            headers: {
                                'Authorization': `Bearer ${token}`,
                                'Accept': '*/*'
                            }
                        });
                        return { telegramId: req.userTelegramId, realFirstName: userResponse.data.realFirstName };
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userTelegramId}:`, error);
                        return { telegramId: req.userTelegramId, realFirstName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };
                    }
                });

                const users = await Promise.all(userNamePromises);

                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç { telegramId: realFirstName }
                const userMap = {};
                users.forEach(u => {
                    userMap[u.telegramId] = u.realFirstName;
                });
                setUserNames(userMap);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π.');
            }
        };

        fetchRequests();
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É)
    const normalizeStatus = (status) => {
        if (!status) return '';

        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const statusLower = status.toLowerCase();

        if (statusLower === '–Ω–æ–≤–æ–µ' || statusLower === '–Ω–æ–≤—ã–π') {
            return '–Ω–æ–≤–æ–µ';
        } else if (statusLower === '–≤ —Ä–∞–±–æ—Ç–µ') {
            return '–≤ —Ä–∞–±–æ—Ç–µ';
        } else if (statusLower === '–∑–∞–≤–µ—Ä—à–µ–Ω–æ' || statusLower === '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ' || statusLower === '–∑–∞–∫—Ä—ã—Ç–æ') {
            return '–∑–∞–≤–µ—Ä—à–µ–Ω–æ';
        }

        return statusLower; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    const getFormattedStatus = (rawStatus) => {
        const status = normalizeStatus(rawStatus);

        switch (status) {
            case '–Ω–æ–≤–æ–µ':
                return '–ù–æ–≤–æ–µ';
            case '–≤ —Ä–∞–±–æ—Ç–µ':
                return '–í —Ä–∞–±–æ—Ç–µ';
            case '–∑–∞–≤–µ—Ä—à–µ–Ω–æ':
                return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
            default:
                // –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
                return status.charAt(0).toUpperCase() + status.slice(1);
        }
    };

    const getStatusBadge = (rawStatus) => {
        const status = normalizeStatus(rawStatus);

        switch (status) {
            case '–Ω–æ–≤–æ–µ':
                return <span className="badge bg-primary ms-2">–ù–æ–≤–æ–µ</span>;
            case '–≤ —Ä–∞–±–æ—Ç–µ':
                return <span className="badge bg-warning text-dark ms-2">–í —Ä–∞–±–æ—Ç–µ</span>;
            case '–∑–∞–≤–µ—Ä—à–µ–Ω–æ':
                return <span className="badge bg-success ms-2">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>;
            default:
                return <span className="badge bg-secondary ms-2">{getFormattedStatus(status) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    const getItemStyle = (rawStatus) => {
        const status = normalizeStatus(rawStatus);

        const baseStyle = {
            cursor: 'pointer',
            borderLeft: '5px solid',
            transition: 'all 0.2s ease',
            marginBottom: '8px', // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
        };

        switch (status) {
            case '–Ω–æ–≤–æ–µ':
                return {
                    ...baseStyle,
                    borderLeftColor: '#0d6efd',
                    backgroundColor: 'rgba(13, 110, 253, 0.05)',
                };
            case '–≤ —Ä–∞–±–æ—Ç–µ':
                return {
                    ...baseStyle,
                    borderLeftColor: '#ffc107',
                    backgroundColor: 'rgba(255, 193, 7, 0.05)',
                };
            case '–∑–∞–≤–µ—Ä—à–µ–Ω–æ':
                return {
                    ...baseStyle,
                    borderLeftColor: '#198754',
                    backgroundColor: 'rgba(25, 135, 84, 0.05)',
                };
            default:
                return {
                    ...baseStyle,
                    borderLeftColor: '#6c757d',
                    backgroundColor: 'rgba(108, 117, 125, 0.05)',
                };
        }
    };

    const handleOpenRequest = (id) => {
        navigate(`/support/${id}`);
    };

    // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ
    const listGroupStyle = {
        display: 'flex',
        flexDirection: 'column',
        gap: '10px' // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞
    };

    return (
        <div className="container mt-4">
            <h2 className="mb-4">üõ†Ô∏è –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π</h2>

            {requests.length === 0 ? (
                <p>–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.</p>
            ) : (
                <ul className="list-group" style={listGroupStyle}>
                    {requests.map((req) => (
                        <li
                            key={req.id}
                            className="list-group-item d-flex justify-content-between align-items-center"
                            style={getItemStyle(req.status)}
                            onClick={() => handleOpenRequest(req.id)}
                            onMouseOver={(e) => {
                                e.currentTarget.style.transform = 'translateY(-2px)';
                                e.currentTarget.style.boxShadow = '0 3px 6px rgba(0, 0, 0, 0.1)';
                            }}
                            onMouseOut={(e) => {
                                e.currentTarget.style.transform = 'translateY(0)';
                                e.currentTarget.style.boxShadow = '0 1px 3px rgba(0, 0, 0, 0.1)';
                            }}
                        >
                            <div>
                                <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {userNames[req.userTelegramId] || req.userTelegramId}<br/>
                                <small className="text-muted">
                                    {req.message.length > 50 ? req.message.substring(0, 50) + '...' : req.message}
                                </small>
                            </div>
                            {getStatusBadge(req.status)}
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
}

export default Support;

