import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function Support() {
    const [requests, setRequests] = useState([]);
    const [userNames, setUserNames] = useState({});
    const navigate = useNavigate();

    useEffect(() => {
        const fetchRequests = async () => {
            const token = localStorage.getItem('token');

            if (!token) {
                alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.');
                return;
            }

            try {
                const response = await axios.get('https://localhost:7137/api/Supports', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': '*/*'
                    }
                });

                const supports = response.data;
                setRequests(supports);

                // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const userNamePromises = supports.map(async (req) => {
                    try {
                        const userResponse = await axios.get(`https://localhost:7137/api/Users/${req.userTelegramId}`, {
                            headers: {
                                'Authorization': `Bearer ${token}`,
                                'Accept': '*/*'
                            }
                        });
                        return { telegramId: req.userTelegramId, realFirstName: userResponse.data.realFirstName };
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.userTelegramId}:`, error);
                        return { telegramId: req.userTelegramId, realFirstName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };
                    }
                });

                const users = await Promise.all(userNamePromises);

                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç { telegramId: realFirstName }
                const userMap = {};
                users.forEach(u => {
                    userMap[u.telegramId] = u.realFirstName;
                });
                setUserNames(userMap);

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π.');
            }
        };

        fetchRequests();
    }, []);

    const getStatusBadge = (status) => {
        switch (status) {
            case '–ù–æ–≤–æ–µ':
                return <span className="badge bg-primary ms-2">–ù–æ–≤–æ–µ</span>;
            case '–í —Ä–∞–±–æ—Ç–µ':
                return <span className="badge bg-warning text-dark ms-2">–í —Ä–∞–±–æ—Ç–µ</span>;
            case '–ó–∞–≤–µ—Ä—à–µ–Ω–æ':
                return <span className="badge bg-success ms-2">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>;
            default:
                return <span className="badge bg-secondary ms-2">{status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>;
        }
    };

    const handleOpenRequest = (id) => {
        navigate(`/support/${id}`);
    };

    return (
        <div className="container mt-4">
            <h2 className="mb-4">üõ†Ô∏è –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π</h2>

            {requests.length === 0 ? (
                <p>–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π.</p>
            ) : (
                <ul className="list-group">
                    {requests.map((req) => (
                        <li
                            key={req.id}
                            className="list-group-item d-flex justify-content-between align-items-center"
                            style={{ cursor: 'pointer' }}
                            onClick={() => handleOpenRequest(req.id)}
                        >
                            <div>
                                <strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {userNames[req.userTelegramId] || req.userTelegramId}<br/>
                                <small className="text-muted">
                                    {req.message.length > 50 ? req.message.substring(0, 50) + '...' : req.message}
                                </small>
                            </div>
                            {getStatusBadge(req.status)}
                        </li>
                    ))}
                </ul>
            )}
        </div>
    );
}

export default Support;
