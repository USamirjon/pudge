import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import { decodeToken } from '../components/jwtUtils'; // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

function SupportDetail() {
    const { id } = useParams();
    const [request, setRequest] = useState(null);
    const [processInput, setProcessInput] = useState('');
    const [statusSelect, setStatusSelect] = useState('');
    const [replyMessage, setReplyMessage] = useState(''); // üÜï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    const fetchRequest = async () => {
        const token = localStorage.getItem('token');

        if (!token) {
            alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        try {
            const response = await axios.get(`https://localhost:7137/api/Supports`, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': '*/*'
                }
            });

            const found = response.data.find(r => r.id === id);
            if (found) {
                let userFirstName = '';
                try {
                    const userResponse = await axios.get(`https://localhost:7137/api/Users/${found.userTelegramId}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': '*/*'
                        }
                    });
                    userFirstName = userResponse.data.realFirstName;
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                    userFirstName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                }

                setRequest({
                    ...found,
                    userFirstName: userFirstName
                });

                if (found.helper) {
                    const helperResponse = await axios.get(`https://localhost:7137/api/Users/${found.helper}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': '*/*'
                        }
                    });
                    setRequest(prevRequest => ({
                        ...prevRequest,
                        helperName: helperResponse.data.realFirstName
                    }));
                }
            } else {
                alert('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodeToken(token));
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.');
        }
    };

    useEffect(() => {
        const token = localStorage.getItem('token');

        if (token) {
            const decoded = decodeToken(token);
            console.log('–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', decoded);
        } else {
            console.warn('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }

        fetchRequest();
    }, [id]);

    const sendMessage = async () => {
        const token = localStorage.getItem('token');

        if (!token || !request) {
            alert('–¢–æ–∫–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
        }

        try {
            await axios.post('https://localhost:7137/api/Supports/send-message', {
                telegramId: request.userTelegramId,
                message: replyMessage
            }, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': '*/*',
                    'Content-Type': 'application/json-patch+json'
                }
            });
            alert('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
            setReplyMessage('');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodeToken(token));
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        }
    };
    const takeInWork = async () => {
        const token = localStorage.getItem('token');
        const payload = decodeToken(token);

        if (!token || !payload?.UserId) {
            alert('–¢–æ–∫–µ–Ω –∏–ª–∏ UserId –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        const helperId = payload.UserId;

        try {
            await axios.patch(`https://localhost:7137/api/Supports/take-appeal?id=${id}&helper=${helperId}`, {}, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': '*/*'
                }
            });
            alert('–ó–∞–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É.');
            fetchRequest();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É:', error);
            console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodeToken(token));
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    };

    const changeHelper = async () => {
        const token = localStorage.getItem('token');
        const helperId = localStorage.getItem('telegramId');

        if (!token || !helperId) {
            alert('–¢–æ–∫–µ–Ω –∏–ª–∏ telegramId –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        try {
            await axios.patch(`https://localhost:7137/api/Supports/change-helper?id=${id}&helper=${helperId}`, {}, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': '*/*'
                }
            });
            alert('–í—ã —Å—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ –∑–∞–ø—Ä–æ—Å.');
            fetchRequest();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–µ–ª–ø–µ—Ä–∞:', error);
            console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodeToken(token));
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ö–µ–ª–ø–µ—Ä–∞.');
        }
    };

    const changeProcess = async () => {
        const token = localStorage.getItem('token');

        if (!token) {
            alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        try {
            await axios.patch(`https://localhost:7137/api/Supports/change-process?id=${id}&process=${encodeURIComponent(processInput)}`, {}, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': '*/*'
                }
            });
            alert('–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω.');
            setProcessInput('');
            fetchRequest();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
            console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodeToken(token));
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.');
        }
    };

    const changeStatus = async () => {
        const token = localStorage.getItem('token');

        if (!token) {
            alert('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        try {
            await axios.patch(`https://localhost:7137/api/Supports/change-status?id=${id}&newStatus=${encodeURIComponent(statusSelect)}`, {}, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': '*/*'
                }
            });
            alert('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.');
            setStatusSelect('');
            fetchRequest();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            console.log('–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodeToken(token));
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
        }
    };

    if (!request) {
        return <div className="container mt-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    return (
        <div className="container mt-4">
            <h2>üîé –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞</h2>
            <div className="card mt-4 shadow-sm">
                <div className="card-body">
                    <h5 className="card-title">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.userFirstName}</h5>
                    <p className="card-text"><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {request.message}</p>
                    <p className="card-text"><strong>–°—Ç–∞—Ç—É—Å:</strong> {request.status}</p>
                    <p className="card-text"><strong>–ü—Ä–æ—Ü–µ—Å—Å:</strong> {request.process}</p>
                    {request.helperName && (
                        <p className="card-text"><strong>–•–µ–ª–ø–µ—Ä:</strong> {request.helperName}</p>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <div className="mt-3">
                        {!request.helper ? (
                            <button className="btn btn-primary me-2" onClick={takeInWork}>–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É</button>
                        ) : (
                            <button className="btn btn-warning me-2" onClick={changeHelper}>–ü–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å</button>
                        )}
                    </div>

                    {/* –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ */}
                    <div className="mt-4">
                        <label className="form-label"><strong>–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å:</strong></label>
                        <input
                            type="text"
                            className="form-control mb-2"
                            value={processInput}
                            onChange={(e) => setProcessInput(e.target.value)}
                        />
                        <button className="btn btn-success" onClick={changeProcess}>–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å</button>
                    </div>

                    {/* –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ */}
                    <div className="mt-4">
                        <label className="form-label"><strong>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:</strong></label>
                        <select
                            className="form-select mb-2"
                            value={statusSelect}
                            onChange={(e) => setStatusSelect(e.target.value)}
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å</option>
                            <option value="–Ω–æ–≤—ã–π">–ù–æ–≤—ã–π</option>
                            <option value="–≤ —Ä–∞–±–æ—Ç–µ">–í —Ä–∞–±–æ—Ç–µ</option>
                            <option value="–∑–∞–≤–µ—Ä—à–µ–Ω–æ">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                        </select>
                        <button className="btn btn-success" onClick={changeStatus}>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                    </div>

                    {/* üÜï –ë–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é */}
                    <div className="mt-4">
                        <label className="form-label"><strong>–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</strong></label>
                        <input
                            type="text"
                            className="form-control mb-2"
                            value={replyMessage}
                            onChange={(e) => setReplyMessage(e.target.value)}
                        />
                        <button className="btn btn-info" onClick={sendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</button>
                    </div>

                </div>
            </div>
        </div>
    );
}

export default SupportDetail;
